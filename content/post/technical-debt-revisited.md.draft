+++
title = "Technical debt considered useful revisited"
tags = [
    "tech",
    "musings"
]
date = "2021-01-15"
+++

In 2013 I wrote a post titled "Technical debt considered useful" in response
to what I saw as an increasing trend by colleagues working in agile teams to
see technical debt as a strictly "bad thing". More recently, the DevOps movement
(which to my mind is entirely positive for the software industry at large) has
started adopting the idea that tech debt is strictly to be avoided.

I recently saw a post titled "Technical Debt - The Anti-DevOps Culture" that
inspired me to return to this topic - after all, a lot can change in IT in
7 years, Perhaps I was wrong. (Spoiler alert: I don't believe I was)

My argument in "Technical debt considered useful" can be summarised as follows.
Technical debt is a metaphor based on 'ordinary' financial debt and it is a very
apt metaphor indeed for the below two reasons.

Firstly, technical debt generates interest that needs to be repaid in the form of:
1. drag on the development process that slows down future development
1. future work needs to be done to eliminate or reduce the technical debt or the
team will eventually "drown in debt"

Secondly, incurring technical debt can be a legitimate strategy to deliver a
project faster by allowing us to borrow time against the future.

Consequently, technical debt can be useful - it's not strictly a bad thing in
all cases. And I still believe that. This post is an attempt to go a little
further than the original by firstly looking at some of the reasons why technical
debt is increasingly seen as "anti-DevOps" by teams and secondly to get more
precise and offer an opinion about the conditions under which it is desirable to:
1. drag incur tech debt
1. reduce tech debt, and
1. adopt a zero-tolerance attitude towards tech debt.

In "Accelerate" the authors, Nicole Forsgren, Jez Humble and Gene Kim, speak
about the  “wall of confusion”  found in traditional IT organizations where
"development throws poor quality code over the wall to operations, and
operations puts in place painful change management processes as a way to inhibit
change".  The increasing consolidation of development and operations into
unified DevOps teams necessitates the resolution of this "wall of confusion"
divide between development and operations. Two such extreme attitudes cannot
coexist for long in a combined DevOps team.
